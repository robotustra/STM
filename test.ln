
/* In this file there are linear pieces of code which do simple manipulation 
 with the variables and ports on the low level. These pieces of code does 
 not lead to the change of state. The change of state is happend only when 
 the end of fragment is reached or any interrupt is happend.

 All global and local variable locations are optimized by translator 
 and they are placed to the best location to minimize memory use and 
 maximize the performance.*/

ui Status	

/*This is an initialisation status of the device. All output parameters 
are placed in first pair of () and the second () are used for input parameters*/


(Status, sd init_exit_local) Init ()
{
	/* Here some local variables can be initialazed and used */
	uc STATUS_REG @ 0x08
	
	/*... 
	On changing of state, it means on exit from current state,
	some parameters could be transfered to the next state where they could 
	be used.

	Even if the linear piece of code is executing it can setup arguments to be
	passed to intercepting routine.*/

	uc Local_counter
	uc4 some_value


	args interrupt0(Local_counter, some_value)

	/*if this stream will be interrupted by int0, these variable will be 
	accessible for inner use inside interrupt0

	this mechanism could be used usually for supplying kernel with the 
	information where the routine was interrupted.*/

	Status |= 0x08 
	/* It's an example of the value which go out to the next line
	(state, stream, branch)*/

	init_exit_local = -0.4454 
	/*It's a signed double variable which can be passed only to the next state*/

}

() A2D (Status, a2d_local = init_exit_local)
{
	/*This status variable was transfered from one state to another, but it's
	actually accessible from any other state, because this var is global*/

	/*It's not necessary to write type of init_exit_local second time, because
	parser will find this type during linking. names of local variables of 
	sequential streams could be different, but in this case initialisation
	of values should be done in arguments list */

	/*In this case the type of a2d_local will be derived from init_exit_local */

	/*Variable types*/

	ch  aaa /*Char, signed, 8 bits*/
	uc  bbb /*Unsigned char 8 bits*/
	ch2 ccc /*Signed char 16 bits*/
	uc2 ddd /*Unsigned char 16 bits*/
	i2  eee /*signed int 16 bits*/
	ui2 fff /*unsigned int 16 bits*/
	i4  ggg
	ui4 hhh
	d2	iii /*double*/
	d4	jjj
	d8  kkk

	/*For convinience bit access is done like in C compilers for microchips*/
	/*bits operations are the same as for C*/
	hhh.14 = bbb.2

	/*arrays*/

	uc ar[1..30]
	ui4 bt[4][10] @ 0x1000 = {1,2,3,4,5,3,4,3,4,3}
	/*All arrays, no matter what length are placed in the memory lineary, 
	there is no dynamic memory allocation yet. All sizes and boundary checks are
	to be done at compilation step. All objects can be initialized any time,
	and could be placed at any location in the memory*/

	/*Every stream has a counter, how many times it was invoked, the name of 
	it is "rcount". This counter could be used inside stream. This counter could
	be reset outside stream. There is another counter "icount" could be reset
	from inside of stream. "rcount" is used by switches for loop organisation */

	/*Copying of objects is done on byte level. No matter how complex data is,
	there is no type conversion. If types are not written during creation 
	of the program it's derived during compilation.*/

}


() Dyn_State_Create ()
{
	/* There dynamic allocation of states and switches is possible.
	First of all this proc should create the states set in the memory.*/

	newstate NewDynamicState	/*Just declaration of the name of new state*/

	/*This dynamic states could not be interted to the state machine at any place
	It should be determined the place for that in the states set.
	For instance, if we have states set NDS, we can add any umber of states to 
	this set.*/

	/*Now we have to all body to the state, which can contain any set of
	streams, linked sequentially.*/

	/*Body of the state can be created from bytecode, compiled during runtime.*/
	NewDynamicState.body = compile(itext)

	/*Compiler uses text as input and the set of basis stream operations.
	Every stream is linear and that's why the compilation process shouldn't 
	take much time. If compiler will fail, or there errors will be during 
	compilation process - 0-legth output will be done.*/

	/*After that input and output variables should be linked. Let's
	say we know the names of params to be linked, for instance,
	itext had iparams like ip1, ip2, and output params like op1, op2,
	so we have to create 2 strings like*/

	uc ipar[..] = "ip1 = oparam_of_previous_STATE, ip2 = some_global_var"
	uc opar[..] = "op1, op2"
	
	NewDynamicState.iparams = ipar 
	NewDynamicState.oparams = opar 

	/*Linking of params list is still can fail, in this case, nothing fatal will
	happen to the state machine. The other possible way to link iparam and oparam
	is below */

	(opar)NewDynamicState(ipar)

	/*This param list can be modified any time befor linking or unlinking*/

	/*After creation of new dynamic state it could be added to the states set,
	which is declared as "dynamic". By doing this the chain of states is modified,
	and input params of the right-side state will be got from newly inserted state.
	Of cause, input params of inserted state will be linked to the 
	left-hand side state.
	*/

	NDS = NewDynamicState | NDS

	/*We also could insert it in the end of chain, 
	by doing NDS = NDS | NewDynamicState */

	/*After this operation, if everything was fine new state will work.
	If there any problem with linking - the number of states in NDS set
	will not be changed. the number of states is inside "NDS.length". */

	/*Now I have to think a bit how to delete this new state from
	the set of states...*/

}

uc FlagSW1 /*global key for switch*/

() Dyn_Switch_Create ()
{
	/*Switches also can be added to the SM dynamically, on the base of 
	existing or dynamically created streams.*/

	newswitch DynSwitch 

	DynSwitch.key = FlagSW1

	/*Now I can add some rules*/
	FlagSW1_case1 = [5..9]

	DynSwitch.rule(FlagSW1_case1, NewDynamicState)
	DynSwitch.rule(other, NewDynSt2)

	/*This dynamic state also should be defined in this file or in other .ln
	file in this folder.
	I think it's quite good idea to have all 3 types of file of one executable 
	in one folder. It permits for instance give parser the name of folder 
	to build final state machine.*/

}

() Dyn_Stream_Create ()
{
	/*This stream creates a stream dynamically and it's 
	not attached to the state, it can be invoked from the any state, just
	keeping the same state.*/

	/*It's quite similar to creation of new state, but stream is not 
	attached to the states set.*/

	newstream DStream	/*Just declaration of the name of new stream*/

	/*This stream can be invoked after compilation*/
	
	/*Body of the stream can be created from bytecode, compiled during runtime.*/
	DStream.body = compile(itext)

	/*After that input and output variables should be linked. Let's
	say we know the names of params to be linked, for instance,
	itext had iparams like ip1, ip2, and output params like op1, op2,
	so we have to create 2 strings like*/

	uc ipar[..] = "ip1 = oparam_of_previous_STATE, ip2 = some_global_var"
	uc opar[..] = "op1, op2"
	
	DStream.iparams = ipar 
	DStream.oparams = opar 

	/*Linking of params list is still can fail, in this case, nothing fatal will
	happen to the state machine. The other possible way to link iparam and oparam
	is below */

	(opar)DStream(ipar) 
	/* The call of this stream it's a substate and in the case of fail
	this substate is just skipped. */


}

(uc code[..]) compile (un text[..])
{
	/*This translator will be added to the any state machine with the
	basis library*/
}